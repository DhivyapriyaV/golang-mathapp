pipeline {
    agent {
        label 'docker-vm'
        // label "deploy-vm"
    }

    environment {
        dockerfileName = "Dockerfile.production"
        // imageName = "priyasivath/mygolang-mathappprod"
        imageName = "mygolang-mathappprod"
        // tagName = "v1.0.0"
        tagName = "v1.0.${BUILD_NUMBER}"
        dockerImage = ''
        registry = "192.168.0.155:8085/"
        // registry = "https://192.168.0.155:8085/"
        registryCredentials = "nexus-repo-manager"
        // scannerHome = tool "SonarScanner"
        // scannerHome = tool "SonarScanner-Maven-4.8.0.2856"
        scannerHome = tool "SonarScanner-Linux"
        profileDockerHub = "priyasivath"
        // registry_DockerHub = "https://hub.docker.com/"
        // registry_DockerHub = "https://index.docker.io/"
        registry_DockerHub = ""
        credentials_DockerHub = "DockerHub-Credentials"
    }

    stages {
        
        stage('git-pull') {
            steps {
               checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/PriyaSIVATH/golang-mathapp.git']]) 
            }
        }

        // stage('image-build') {
        //     steps {
        //     step([$class: 'DockerBuilderPublisher', cleanImages: false, cleanupWithJenkinsJobDelete: false, cloud: '', dockerFileDirectory: './Dockerfile.production', fromRegistry: [], pushCredentialsId: '', pushOnSuccess: false, tagsString: 'mygomathapp'])
        //     }
        // }

//  Sonarqube Analysis step added -- BEFORE -- building docker image of golang-mathapp
        // stage('sonarqube-analysis') {
        //     steps {
        //    // def scannerHome = tool 'SonarScanner';
        //      withSonarQubeEnv('sonarqube1') {
        //         sh "${scannerHome}/bin/sonar-scanner"
        //         }
        //      }
        // }


       stage('image-build') {
            steps {
                script {
                    dockerImage = docker.build("${imageName}", "-f ${dockerfileName} .")
                    // dockerImage.push("${tagName}")       // try to push default docker registry might be a configured one
                }
            }
        }


        stage('sequential stage - Docker HUB') {
            stages {
                stage('docker image-build') {
                    steps {
                        script {
                            dockerImage = docker.build("${profileDockerHub+'/'+imageName}", "-f ${dockerfileName} .")
                        }
                    }
                }
        
                stage('docker-push') {
                    steps {
                        script {
                                // /* withDockerRegistry(credentialsId: '${credentials_DockerHub}', url: '${registry_DockerHub}') {
                                    // sh 'dockerImage.push("${tagName}")'*/
                                // withDockerRegistry(credentialsId: 'DockerHub-Credentials', url: 'https://index.docker.io/') {
                                // withDockerRegistry(credentialsId: 'DockerHub-Credentials', url: 'https://hub.docker.com/') {
                                // withDockerRegistry(credentialsId: 'DockerHub-Credentials', url: 'https://hub.docker.com/u/priyasivath/') {
                            withDockerRegistry(credentialsId: 'DockerHub-Credentials', url: '') {
                                dockerImage.push("${tagName}")
                            }
                        }
                    }
                }
            }
        }

//  Sonarqube Analysis step added  -- AFTER -- building docker image of golang-mathapp
        stage('sonarqube-analysis') {
            steps {
           // def scannerHome = tool 'SonarScanner';
             withSonarQubeEnv('sonarqube1') {
                sh "${scannerHome}/bin/sonar-scanner"
                }
             }
        }


        stage("Quality Gate") {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                 waitForQualityGate abortPipeline: true
                }
            }
        }


        stage('nexus-push') {
            steps {
                script {
                    // docker.withRegistry( registry, registryCredentials) {
                    docker.withRegistry( 'http://'+registry, registryCredentials) {
                        // echo '${env.BUILD_NUMBER}'
                        dockerImage.push("${tagName}") 
                    }

                //    // This step should not normally be used in your script. Consult the inline help for details.
                //     withDockerRegistry(credentialsId: 'nexus-repo-manager', url: 'http://192.168.0.155:8085/') {
                //     // some block
                //     dockerImage.push("${tagName}")
                //         }
                }
            }
        }

        //   // Stopping previous running Docker containers for cleaner Docker run 
        // stage('stopping running containers') {
        //     steps {
        //         sh 'docker ps -f name=mymathcontainer -q | xargs --no-run-if-empty docker container stop'
        //         sh 'docker container ls -a -fname=mymathcontainer -q | xargs -r docker container rm'
        //     }
        // }

        // stage('docker run') {
        //     agent {
        //         label "deploy-vm"
        //         // label 'docker-vm'
        //         }
        //     steps {
        //         // agent {
        //         // label "deploy-vm"
        //         // } 
        //         script {
        //             sh 'docker ps -f name=mymathcontainer -q | xargs --no-run-if-empty docker container stop'
        //             sh 'docker container ls -a -fname=mymathcontainer -q | xargs -r docker container rm'
        //             // sh 'docker run -d -p 8020:8010 --rm --name mymathcontainer ' + registry + imageName + ':${tagName}' 

        //             withDockerRegistry(credentialsId: 'nexus-repo-manager', url: 'http://192.168.0.155:8085/') {
        //             // sh 'docker run -d -p 8020:8010 --rm --name mathapp 192.168.0.155:8085/mygolang-mathappprod:v1.0.0'
        //             sh 'docker run -d -p 8020:8010 --rm --name mymathcontainer ' + registry + imageName + ':${tagName}' 
        //             }
        //         }
        //     }
        // }


        stage('sequential stage - deployment server') {
            agent {
                label 'deploy-vm'
            }
            stages {
                 // Stopping previous running Docker containers for cleaner Docker run 
                stage('stopping running containers') {
                    steps {
                        sh 'docker ps -f name=mymathcontainer -q | xargs --no-run-if-empty docker container stop'
                        sh 'docker container ls -a -fname=mymathcontainer -q | xargs -r docker container rm'
                    }
                }
                stage('docker run') {
                    steps {
                        script {
                            withDockerRegistry(credentialsId: 'nexus-repo-manager', url: 'http://192.168.0.155:8085/') {
                             // sh 'docker run -d -p 8020:8010 --rm --name mathapp 192.168.0.155:8085/mygolang-mathappprod:v1.0.0'
                            sh 'docker run -d -p 8020:8010 --rm --name mymathcontainer ' + registry + imageName + ':${tagName}' 
                            }   
                        }
                    }
                }
            }

        }

    }

}